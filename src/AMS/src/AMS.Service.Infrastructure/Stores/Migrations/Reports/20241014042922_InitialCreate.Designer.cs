// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.AMS.Service.Infrastructure.Stores;

#nullable disable

namespace Undersoft.AMS.Service.Infrastructure.Stores.Migrations.Reports
{
    [DbContext(typeof(ReportStore))]
    [Migration("20241014042922_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Activities", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Addresses", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Amount", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<double?>("Factor")
                        .HasColumnType("double precision");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Prevalue")
                        .HasColumnType("double precision");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<long>("Unit")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitName")
                        .HasColumnType("text");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("Index");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Amounts", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Date", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AmountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("Value")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AmountId");

                    b.HasIndex("Index");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Dates", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Emails", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Endpoint", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string[]>("Parameters")
                        .HasColumnType("text[]");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<string>("StateUrl")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("LocationId");

                    b.ToTable("Endpoints", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("Index");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Items", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Locations", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string>("SocialMedia")
                        .HasColumnType("text");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Websites")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Participants", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Phone", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Phones", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Place", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Block")
                        .HasColumnType("integer");

                    b.Property<int>("Cluster")
                        .HasColumnType("integer");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int?>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.Property<int?>("Z")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.HasIndex("LocationId");

                    b.ToTable("Places", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Member")
                        .HasColumnType("text");

                    b.Property<byte[]>("MemberData")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Resources", "domain");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<bool>("IsVariant")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Subjects", "domain");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Activity>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ActivityIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ParticipantIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Subject>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("SubjectIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesToParticipants", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesToResources", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Participant, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ParticipantsToResources", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Subject, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SubjectsToResources", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Activity>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivityToActivity", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Participant, Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ParticipantToParticipant", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Subject, Undersoft.AMS.Domain.Entities.Subject>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(7);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(8);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(9);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(10);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(6);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SubjectToSubject", "relations");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Address", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Addresses")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Amount", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "Activity")
                        .WithMany("Amounts")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Item", "Item")
                        .WithMany("Amounts")
                        .HasForeignKey("ItemId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Amounts")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "Subject")
                        .WithMany("Amounts")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Activity");

                    b.Navigation("Item");

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Date", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "Activity")
                        .WithMany("Dates")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Amount", "Amount")
                        .WithMany("Dates")
                        .HasForeignKey("AmountId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Item", "Item")
                        .WithMany("Dates")
                        .HasForeignKey("ItemId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Dates")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Activity");

                    b.Navigation("Amount");

                    b.Navigation("Item");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Email", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Emails")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Endpoint", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Location", "Location")
                        .WithMany("Endpoints")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Item", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "Activity")
                        .WithMany("Items")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Items")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "Subject")
                        .WithMany("Items")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Activity");

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Location", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "Activity")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Location", "ActivityId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Item", "Item")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Location", "ItemId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Location", "ParticipantId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Resource", "Resource")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Location", "ResourceId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "Subject")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Location", "SubjectId");

                    b.Navigation("Activity");

                    b.Navigation("Item");

                    b.Navigation("Participant");

                    b.Navigation("Resource");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Phone", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Participant")
                        .WithMany("Phones")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Place", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Address", "Address")
                        .WithOne("Place")
                        .HasForeignKey("Undersoft.AMS.Domain.Entities.Place", "AddressId");

                    b.HasOne("Undersoft.AMS.Domain.Entities.Location", "Location")
                        .WithMany("Places")
                        .HasForeignKey("LocationId");

                    b.Navigation("Address");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.AMS.Domain.Entities.Subject>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "LeftEntity")
                        .WithMany("ActivitiesToParticipants")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "RightEntity")
                        .WithMany("ActivitiesToParticipants")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "LeftEntity")
                        .WithMany("ActivitiesToResources")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.AMS.Domain.Entities.Resource", "RightEntity")
                        .WithMany("ActivitiesToResources")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Participant, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "LeftEntity")
                        .WithMany("ParticipantsToResources")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.AMS.Domain.Entities.Resource", "RightEntity")
                        .WithMany("ParticipantsToResources")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Remote.RemoteLink<Undersoft.AMS.Domain.Entities.Subject, Undersoft.AMS.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "LeftEntity")
                        .WithMany("SubjectsToResources")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.AMS.Domain.Entities.Resource", "RightEntity")
                        .WithMany("SubjectsToResources")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Activity, Undersoft.AMS.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.AMS.Domain.Entities.Activity", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Participant, Undersoft.AMS.Domain.Entities.Participant>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.AMS.Domain.Entities.Participant", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.AMS.Domain.Entities.Subject, Undersoft.AMS.Domain.Entities.Subject>", b =>
                {
                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.AMS.Domain.Entities.Subject", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Activity", b =>
                {
                    b.Navigation("ActivitiesToParticipants");

                    b.Navigation("ActivitiesToResources");

                    b.Navigation("Amounts");

                    b.Navigation("Dates");

                    b.Navigation("Identifiers");

                    b.Navigation("Items");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Address", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Amount", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Item", b =>
                {
                    b.Navigation("Amounts");

                    b.Navigation("Dates");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Location", b =>
                {
                    b.Navigation("Endpoints");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Participant", b =>
                {
                    b.Navigation("ActivitiesToParticipants");

                    b.Navigation("Addresses");

                    b.Navigation("Amounts");

                    b.Navigation("Dates");

                    b.Navigation("Emails");

                    b.Navigation("Identifiers");

                    b.Navigation("Items");

                    b.Navigation("Location");

                    b.Navigation("ParticipantsToResources");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Resource", b =>
                {
                    b.Navigation("ActivitiesToResources");

                    b.Navigation("Location");

                    b.Navigation("ParticipantsToResources");

                    b.Navigation("SubjectsToResources");
                });

            modelBuilder.Entity("Undersoft.AMS.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Amounts");

                    b.Navigation("Identifiers");

                    b.Navigation("Items");

                    b.Navigation("Location");

                    b.Navigation("SubjectsToResources");
                });
#pragma warning restore 612, 618
        }
    }
}
