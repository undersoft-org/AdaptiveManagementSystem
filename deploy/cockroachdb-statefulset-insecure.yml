apiVersion: v1
kind: Service
metadata:
  # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
  # automatically load balance connections to the different database pods.
  name: data-cluster
  labels:
    app: data-server
spec:
  ports:
  # The main port, served by gRPC, serves Postgres-flavor SQL, internode
  # traffic and the cli.
  - port: 26257
    targetPort: 26257
    name: grpc
  # The secondary port serves the UI as well as health and debug endpoints.
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: data-server
---
apiVersion: v1
kind: Service
metadata:
  # This service only exists to create DNS entries for each pod in the stateful
  # set such that they can resolve each other's IP addresses. It does not
  # create a load-balanced ClusterIP and should not be used directly by clients
  # in most circumstances.
  name: data-server
  labels:
    app: data-server
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    # Enable automatic monitoring of all instances when Prometheus is running in the server.
    prometheus.io/scrape: "true"
    prometheus.io/path: "_status/vars"
    prometheus.io/port: "8080"
spec:
  ports:
  - port: 26257
    targetPort: 26257
    name: grpc
  - port: 8080
    targetPort: 8080
    name: http
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other CockroachDB pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    app: data-server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: data-server
spec:
  serviceName: "data-server"
  replicas: 3
  selector:
    matchLabels:
      app: data-server
  template:
    metadata:
      labels:
        app: data-server
    spec:
      # NOTE: Running with `hostNetwork: true` means that CockroachDB will use
      # the host machines' IP address and hostname, and that nothing else on
      # the machines will be able to use the same ports. This means that only 1
      # CockroachDB pod will ever be schedulable on the same machine, because
      # otherwise their ports would conflict.
      # hostNetwork: true
      # dnsPolicy: ClusterFirstWithHostNet
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 70
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - data-server
              topologyKey: kubernetes.io/hostname
      containers:
      - name: data-server
        # NOTE: Always use the most recent version of CockroachDB for the best
        # performance and reliability.
        image: uscr/amsdataserver:latest
        imagePullPolicy: IfNotPresent
        # TODO: Change these to appropriate values for the hardware that you're running. You can see
        # the resources that can be allocated on each of your Kubernetes nodes by running:
        #   kubectl describe nodes
        # Note that requests and limits should have identical values.
        resources:
          requests:
            cpu: "2"
            memory: "3.8Gi"
          limits:
            cpu: "2"
            memory: "3.8Gi" 
        ports:
        - containerPort: 26257
          name: grpc
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: "/health?ready=1"
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-storage
          mountPath: /data
        env:
        - name: COCKROACH_CHANNEL
          value: kubernetes-insecure
        command:
          - "/bin/bash"
          - "-ecx"
          # The use of qualified `hostname -f` is crucial:
          # Other nodes aren't able to look up the unqualified hostname.
		  - exec
            /cockroach/cockroach
            start
            --logtostderr
            --insecure
            --advertise-host $(hostname -f)
            --http-addr 0.0.0.0
            --join data-server-0,data-server-1,data-server-2
            --cache 25%
            --max-sql-memory 25%		  
      # No pre-stop hook is required, a SIGTERM plus some time is all that's
      # needed for graceful shutdown of a node.
      terminationGracePeriodSeconds: 60
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-storage
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data-storage
    spec:
      accessModes:
        - "ReadWriteOnce"
      # TODO: This specifically asks for a storage class with the name "ssd". A
      # storage class of this name doesn't exist by default. See our docs for
      # more information on how to create an optimized storage class for use here:
      # https://www.cockroachlabs.com/docs/stable/kubernetes-performance.html#disk-type
      # storageClassName: ssd
      resources:
        requests:
          # TODO: This asks for a fairly large disk by default because on
          # certain popular clouds there is a direct correlation between disk
          # size and the IOPS provisioned to the disk. Change this as necessary
          # to suit your needs, but be aware that smaller disks will typically
          # mean worse performance.
          storage: 10Gi
